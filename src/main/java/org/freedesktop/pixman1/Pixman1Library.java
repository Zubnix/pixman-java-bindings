package org.freedesktop.pixman1;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>pixman-1</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Pixman1Library extends Library {
	public static final String JNA_LIBRARY_NAME = "pixman-1";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Pixman1Library.JNA_LIBRARY_NAME);
	public static final Pixman1Library INSTANCE = (Pixman1Library)Native.loadLibrary(Pixman1Library.JNA_LIBRARY_NAME, Pixman1Library.class);
	/**
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * enum values
	 */
	public static interface pixman_repeat_t {
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:271</i> */
		public static final int PIXMAN_REPEAT_NONE = 0;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:272</i> */
		public static final int PIXMAN_REPEAT_NORMAL = 1;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:273</i> */
		public static final int PIXMAN_REPEAT_PAD = 2;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:274</i> */
		public static final int PIXMAN_REPEAT_REFLECT = 3;
	};
	/**
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * enum values
	 */
	public static interface pixman_filter_t {
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:279</i> */
		public static final int PIXMAN_FILTER_FAST = 0;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:280</i> */
		public static final int PIXMAN_FILTER_GOOD = 1;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:281</i> */
		public static final int PIXMAN_FILTER_BEST = 2;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:282</i> */
		public static final int PIXMAN_FILTER_NEAREST = 3;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:283</i> */
		public static final int PIXMAN_FILTER_BILINEAR = 4;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:284</i> */
		public static final int PIXMAN_FILTER_CONVOLUTION = 5;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:305</i> */
		public static final int PIXMAN_FILTER_SEPARABLE_CONVOLUTION = 6;
	};
	/**
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * enum values
	 */
	public static interface pixman_op_t {
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:310</i> */
		public static final int PIXMAN_OP_CLEAR = 0x00;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:311</i> */
		public static final int PIXMAN_OP_SRC = 0x01;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:312</i> */
		public static final int PIXMAN_OP_DST = 0x02;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:313</i> */
		public static final int PIXMAN_OP_OVER = 0x03;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:314</i> */
		public static final int PIXMAN_OP_OVER_REVERSE = 0x04;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:315</i> */
		public static final int PIXMAN_OP_IN = 0x05;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:316</i> */
		public static final int PIXMAN_OP_IN_REVERSE = 0x06;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:317</i> */
		public static final int PIXMAN_OP_OUT = 0x07;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:318</i> */
		public static final int PIXMAN_OP_OUT_REVERSE = 0x08;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:319</i> */
		public static final int PIXMAN_OP_ATOP = 0x09;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:320</i> */
		public static final int PIXMAN_OP_ATOP_REVERSE = 0x0a;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:321</i> */
		public static final int PIXMAN_OP_XOR = 0x0b;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:322</i> */
		public static final int PIXMAN_OP_ADD = 0x0c;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:323</i> */
		public static final int PIXMAN_OP_SATURATE = 0x0d;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:325</i> */
		public static final int PIXMAN_OP_DISJOINT_CLEAR = 0x10;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:326</i> */
		public static final int PIXMAN_OP_DISJOINT_SRC = 0x11;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:327</i> */
		public static final int PIXMAN_OP_DISJOINT_DST = 0x12;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:328</i> */
		public static final int PIXMAN_OP_DISJOINT_OVER = 0x13;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:329</i> */
		public static final int PIXMAN_OP_DISJOINT_OVER_REVERSE = 0x14;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:330</i> */
		public static final int PIXMAN_OP_DISJOINT_IN = 0x15;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:331</i> */
		public static final int PIXMAN_OP_DISJOINT_IN_REVERSE = 0x16;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:332</i> */
		public static final int PIXMAN_OP_DISJOINT_OUT = 0x17;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:333</i> */
		public static final int PIXMAN_OP_DISJOINT_OUT_REVERSE = 0x18;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:334</i> */
		public static final int PIXMAN_OP_DISJOINT_ATOP = 0x19;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:335</i> */
		public static final int PIXMAN_OP_DISJOINT_ATOP_REVERSE = 0x1a;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:336</i> */
		public static final int PIXMAN_OP_DISJOINT_XOR = 0x1b;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:338</i> */
		public static final int PIXMAN_OP_CONJOINT_CLEAR = 0x20;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:339</i> */
		public static final int PIXMAN_OP_CONJOINT_SRC = 0x21;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:340</i> */
		public static final int PIXMAN_OP_CONJOINT_DST = 0x22;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:341</i> */
		public static final int PIXMAN_OP_CONJOINT_OVER = 0x23;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:342</i> */
		public static final int PIXMAN_OP_CONJOINT_OVER_REVERSE = 0x24;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:343</i> */
		public static final int PIXMAN_OP_CONJOINT_IN = 0x25;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:344</i> */
		public static final int PIXMAN_OP_CONJOINT_IN_REVERSE = 0x26;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:345</i> */
		public static final int PIXMAN_OP_CONJOINT_OUT = 0x27;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:346</i> */
		public static final int PIXMAN_OP_CONJOINT_OUT_REVERSE = 0x28;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:347</i> */
		public static final int PIXMAN_OP_CONJOINT_ATOP = 0x29;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:348</i> */
		public static final int PIXMAN_OP_CONJOINT_ATOP_REVERSE = 0x2a;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:349</i> */
		public static final int PIXMAN_OP_CONJOINT_XOR = 0x2b;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:351</i> */
		public static final int PIXMAN_OP_MULTIPLY = 0x30;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:352</i> */
		public static final int PIXMAN_OP_SCREEN = 0x31;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:353</i> */
		public static final int PIXMAN_OP_OVERLAY = 0x32;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:354</i> */
		public static final int PIXMAN_OP_DARKEN = 0x33;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:355</i> */
		public static final int PIXMAN_OP_LIGHTEN = 0x34;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:356</i> */
		public static final int PIXMAN_OP_COLOR_DODGE = 0x35;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:357</i> */
		public static final int PIXMAN_OP_COLOR_BURN = 0x36;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:358</i> */
		public static final int PIXMAN_OP_HARD_LIGHT = 0x37;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:359</i> */
		public static final int PIXMAN_OP_SOFT_LIGHT = 0x38;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:360</i> */
		public static final int PIXMAN_OP_DIFFERENCE = 0x39;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:361</i> */
		public static final int PIXMAN_OP_EXCLUSION = 0x3a;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:362</i> */
		public static final int PIXMAN_OP_HSL_HUE = 0x3b;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:363</i> */
		public static final int PIXMAN_OP_HSL_SATURATION = 0x3c;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:364</i> */
		public static final int PIXMAN_OP_HSL_COLOR = 0x3d;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:365</i> */
		public static final int PIXMAN_OP_HSL_LUMINOSITY = 0x3e;
	};
	/**
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * enum values
	 */
	public static interface pixman_region_overlap_t {
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:407</i> */
		public static final int PIXMAN_REGION_OUT = 0;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:408</i> */
		public static final int PIXMAN_REGION_IN = 1;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:409</i> */
		public static final int PIXMAN_REGION_PART = 2;
	};
	/**
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * enum values
	 */
	public static interface pixman_format_code_t {
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:679</i> */
		public static final int PIXMAN_a8r8g8b8 = (((32) << 24) | ((2) << 16) | ((8) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:680</i> */
		public static final int PIXMAN_x8r8g8b8 = (((32) << 24) | ((2) << 16) | ((0) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:681</i> */
		public static final int PIXMAN_a8b8g8r8 = (((32) << 24) | ((3) << 16) | ((8) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:682</i> */
		public static final int PIXMAN_x8b8g8r8 = (((32) << 24) | ((3) << 16) | ((0) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:683</i> */
		public static final int PIXMAN_b8g8r8a8 = (((32) << 24) | ((8) << 16) | ((8) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:684</i> */
		public static final int PIXMAN_b8g8r8x8 = (((32) << 24) | ((8) << 16) | ((0) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:685</i> */
		public static final int PIXMAN_r8g8b8a8 = (((32) << 24) | ((9) << 16) | ((8) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:686</i> */
		public static final int PIXMAN_r8g8b8x8 = (((32) << 24) | ((9) << 16) | ((0) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:687</i> */
		public static final int PIXMAN_x14r6g6b6 = (((32) << 24) | ((2) << 16) | ((0) << 12) | ((6) << 8) | ((6) << 4) | (6));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:688</i> */
		public static final int PIXMAN_x2r10g10b10 = (((32) << 24) | ((2) << 16) | ((0) << 12) | ((10) << 8) | ((10) << 4) | (10));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:689</i> */
		public static final int PIXMAN_a2r10g10b10 = (((32) << 24) | ((2) << 16) | ((2) << 12) | ((10) << 8) | ((10) << 4) | (10));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:690</i> */
		public static final int PIXMAN_x2b10g10r10 = (((32) << 24) | ((3) << 16) | ((0) << 12) | ((10) << 8) | ((10) << 4) | (10));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:691</i> */
		public static final int PIXMAN_a2b10g10r10 = (((32) << 24) | ((3) << 16) | ((2) << 12) | ((10) << 8) | ((10) << 4) | (10));
		/**
		 * sRGB formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:694</i>
		 */
		public static final int PIXMAN_a8r8g8b8_sRGB = (((32) << 24) | ((10) << 16) | ((8) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/**
		 * 24bpp formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:697</i>
		 */
		public static final int PIXMAN_r8g8b8 = (((24) << 24) | ((2) << 16) | ((0) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:698</i> */
		public static final int PIXMAN_b8g8r8 = (((24) << 24) | ((3) << 16) | ((0) << 12) | ((8) << 8) | ((8) << 4) | (8));
		/**
		 * 16bpp formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:701</i>
		 */
		public static final int PIXMAN_r5g6b5 = (((16) << 24) | ((2) << 16) | ((0) << 12) | ((5) << 8) | ((6) << 4) | (5));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:702</i> */
		public static final int PIXMAN_b5g6r5 = (((16) << 24) | ((3) << 16) | ((0) << 12) | ((5) << 8) | ((6) << 4) | (5));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:704</i> */
		public static final int PIXMAN_a1r5g5b5 = (((16) << 24) | ((2) << 16) | ((1) << 12) | ((5) << 8) | ((5) << 4) | (5));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:705</i> */
		public static final int PIXMAN_x1r5g5b5 = (((16) << 24) | ((2) << 16) | ((0) << 12) | ((5) << 8) | ((5) << 4) | (5));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:706</i> */
		public static final int PIXMAN_a1b5g5r5 = (((16) << 24) | ((3) << 16) | ((1) << 12) | ((5) << 8) | ((5) << 4) | (5));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:707</i> */
		public static final int PIXMAN_x1b5g5r5 = (((16) << 24) | ((3) << 16) | ((0) << 12) | ((5) << 8) | ((5) << 4) | (5));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:708</i> */
		public static final int PIXMAN_a4r4g4b4 = (((16) << 24) | ((2) << 16) | ((4) << 12) | ((4) << 8) | ((4) << 4) | (4));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:709</i> */
		public static final int PIXMAN_x4r4g4b4 = (((16) << 24) | ((2) << 16) | ((0) << 12) | ((4) << 8) | ((4) << 4) | (4));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:710</i> */
		public static final int PIXMAN_a4b4g4r4 = (((16) << 24) | ((3) << 16) | ((4) << 12) | ((4) << 8) | ((4) << 4) | (4));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:711</i> */
		public static final int PIXMAN_x4b4g4r4 = (((16) << 24) | ((3) << 16) | ((0) << 12) | ((4) << 8) | ((4) << 4) | (4));
		/**
		 * 8bpp formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:714</i>
		 */
		public static final int PIXMAN_a8 = (((8) << 24) | ((1) << 16) | ((8) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:715</i> */
		public static final int PIXMAN_r3g3b2 = (((8) << 24) | ((2) << 16) | ((0) << 12) | ((3) << 8) | ((3) << 4) | (2));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:716</i> */
		public static final int PIXMAN_b2g3r3 = (((8) << 24) | ((3) << 16) | ((0) << 12) | ((3) << 8) | ((3) << 4) | (2));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:717</i> */
		public static final int PIXMAN_a2r2g2b2 = (((8) << 24) | ((2) << 16) | ((2) << 12) | ((2) << 8) | ((2) << 4) | (2));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:718</i> */
		public static final int PIXMAN_a2b2g2r2 = (((8) << 24) | ((3) << 16) | ((2) << 12) | ((2) << 8) | ((2) << 4) | (2));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:720</i> */
		public static final int PIXMAN_c8 = (((8) << 24) | ((4) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:721</i> */
		public static final int PIXMAN_g8 = (((8) << 24) | ((5) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:723</i> */
		public static final int PIXMAN_x4a4 = (((8) << 24) | ((1) << 16) | ((4) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:725</i> */
		public static final int PIXMAN_x4c4 = (((8) << 24) | ((4) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:726</i> */
		public static final int PIXMAN_x4g4 = (((8) << 24) | ((5) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/**
		 * 4bpp formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:729</i>
		 */
		public static final int PIXMAN_a4 = (((4) << 24) | ((1) << 16) | ((4) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:730</i> */
		public static final int PIXMAN_r1g2b1 = (((4) << 24) | ((2) << 16) | ((0) << 12) | ((1) << 8) | ((2) << 4) | (1));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:731</i> */
		public static final int PIXMAN_b1g2r1 = (((4) << 24) | ((3) << 16) | ((0) << 12) | ((1) << 8) | ((2) << 4) | (1));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:732</i> */
		public static final int PIXMAN_a1r1g1b1 = (((4) << 24) | ((2) << 16) | ((1) << 12) | ((1) << 8) | ((1) << 4) | (1));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:733</i> */
		public static final int PIXMAN_a1b1g1r1 = (((4) << 24) | ((3) << 16) | ((1) << 12) | ((1) << 8) | ((1) << 4) | (1));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:735</i> */
		public static final int PIXMAN_c4 = (((4) << 24) | ((4) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:736</i> */
		public static final int PIXMAN_g4 = (((4) << 24) | ((5) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/**
		 * 1bpp formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:739</i>
		 */
		public static final int PIXMAN_a1 = (((1) << 24) | ((1) << 16) | ((1) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:741</i> */
		public static final int PIXMAN_g1 = (((1) << 24) | ((5) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/**
		 * YUV formats<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:744</i>
		 */
		public static final int PIXMAN_yuy2 = (((16) << 24) | ((6) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:745</i> */
		public static final int PIXMAN_yv12 = (((12) << 24) | ((7) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 4) | (0));
	};
	/**
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * enum values
	 */
	public static interface pixman_kernel_t {
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:826</i> */
		public static final int PIXMAN_KERNEL_IMPULSE = 0;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:827</i> */
		public static final int PIXMAN_KERNEL_BOX = 1;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:828</i> */
		public static final int PIXMAN_KERNEL_LINEAR = 2;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:829</i> */
		public static final int PIXMAN_KERNEL_CUBIC = 3;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:830</i> */
		public static final int PIXMAN_KERNEL_GAUSSIAN = 4;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:831</i> */
		public static final int PIXMAN_KERNEL_LANCZOS2 = 5;
		/** <i>native declaration : /usr/include/pixman-1/pixman.h:832</i> */
		public static final int PIXMAN_KERNEL_LANCZOS3 = 6;
		/**
		 * Jim Blinn's 'nice' filter<br>
		 * <i>native declaration : /usr/include/pixman-1/pixman.h:833</i>
		 */
		public static final int PIXMAN_KERNEL_LANCZOS3_STRETCHED = 7;
	};
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_ARGB = (int)2;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_RGBA = (int)9;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_MAX_INDEXED = (int)256;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_BGRA = (int)8;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_ABGR = (int)3;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_ARGB_SRGB = (int)10;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_OTHER = (int)0;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_COLOR = (int)4;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_A = (int)1;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_YUY2 = (int)6;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_YV12 = (int)7;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h</i><br>
	 * (- << 31)
	 */
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public static final int PIXMAN_TYPE_GRAY = (int)5;
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public interface pixman_read_memory_func_t extends Callback {
		int apply(Pointer src, int size);
	};
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public interface pixman_write_memory_func_t extends Callback {
		void apply(Pointer dst, int value, int size);
	};
	/** <i>native declaration : /usr/include/pixman-1/pixman.h</i> */
	public interface pixman_image_destroy_func_t extends Callback {
		void apply(Pointer image, Pointer data);
	};
	/**
	 * Original signature : <code>void pixman_transform_init_identity(pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:176</i>
	 */
	void pixman_transform_init_identity(pixman_transform matrix);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_point_3d(pixman_transform*, pixman_vector*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:177</i>
	 */
	int pixman_transform_point_3d(pixman_transform transform, pixman_vector vector);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_point(pixman_transform*, pixman_vector*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:179</i>
	 */
	int pixman_transform_point(pixman_transform transform, pixman_vector vector);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_multiply(pixman_transform*, pixman_transform*, pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:181</i>
	 */
	int pixman_transform_multiply(pixman_transform dst, pixman_transform l, pixman_transform r);
	/**
	 * Original signature : <code>void pixman_transform_init_scale(pixman_transform*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:184</i>
	 */
	void pixman_transform_init_scale(pixman_transform t, int sx, int sy);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_scale(pixman_transform*, pixman_transform*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:187</i>
	 */
	int pixman_transform_scale(pixman_transform forward, pixman_transform reverse, int sx, int sy);
	/**
	 * Original signature : <code>void pixman_transform_init_rotate(pixman_transform*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:191</i>
	 */
	void pixman_transform_init_rotate(pixman_transform t, int cos, int sin);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_rotate(pixman_transform*, pixman_transform*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:194</i>
	 */
	int pixman_transform_rotate(pixman_transform forward, pixman_transform reverse, int c, int s);
	/**
	 * Original signature : <code>void pixman_transform_init_translate(pixman_transform*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:198</i>
	 */
	void pixman_transform_init_translate(pixman_transform t, int tx, int ty);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_translate(pixman_transform*, pixman_transform*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:201</i>
	 */
	int pixman_transform_translate(pixman_transform forward, pixman_transform reverse, int tx, int ty);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_bounds(pixman_transform*, pixman_box16*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:205</i>
	 */
	int pixman_transform_bounds(pixman_transform matrix, pixman_box16 b);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_invert(pixman_transform*, pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:207</i>
	 */
	int pixman_transform_invert(pixman_transform dst, pixman_transform src);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_is_identity(pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:209</i>
	 */
	int pixman_transform_is_identity(pixman_transform t);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_is_scale(pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:210</i>
	 */
	int pixman_transform_is_scale(pixman_transform t);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_is_int_translate(pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:211</i>
	 */
	int pixman_transform_is_int_translate(pixman_transform t);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_is_inverse(pixman_transform*, pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:212</i>
	 */
	int pixman_transform_is_inverse(pixman_transform a, pixman_transform b);
	/**
	 * Original signature : <code>pixman_bool_t pixman_transform_from_pixman_f_transform(pixman_transform*, pixman_f_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:231</i>
	 */
	int pixman_transform_from_pixman_f_transform(pixman_transform t, pixman_f_transform ft);
	/**
	 * Original signature : <code>void pixman_f_transform_from_pixman_transform(pixman_f_transform*, pixman_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:233</i>
	 */
	void pixman_f_transform_from_pixman_transform(pixman_f_transform ft, pixman_transform t);
	/**
	 * Original signature : <code>pixman_bool_t pixman_f_transform_invert(pixman_f_transform*, pixman_f_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:235</i>
	 */
	int pixman_f_transform_invert(pixman_f_transform dst, pixman_f_transform src);
	/**
	 * Original signature : <code>pixman_bool_t pixman_f_transform_point(pixman_f_transform*, pixman_f_vector*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:237</i>
	 */
	int pixman_f_transform_point(pixman_f_transform t, pixman_f_vector v);
	/**
	 * Original signature : <code>void pixman_f_transform_point_3d(pixman_f_transform*, pixman_f_vector*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:239</i>
	 */
	void pixman_f_transform_point_3d(pixman_f_transform t, pixman_f_vector v);
	/**
	 * Original signature : <code>void pixman_f_transform_multiply(pixman_f_transform*, pixman_f_transform*, pixman_f_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:241</i>
	 */
	void pixman_f_transform_multiply(pixman_f_transform dst, pixman_f_transform l, pixman_f_transform r);
	/**
	 * Original signature : <code>void pixman_f_transform_init_scale(pixman_f_transform*, double, double)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:244</i>
	 */
	void pixman_f_transform_init_scale(pixman_f_transform t, double sx, double sy);
	/**
	 * Original signature : <code>pixman_bool_t pixman_f_transform_scale(pixman_f_transform*, pixman_f_transform*, double, double)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:247</i>
	 */
	int pixman_f_transform_scale(pixman_f_transform forward, pixman_f_transform reverse, double sx, double sy);
	/**
	 * Original signature : <code>void pixman_f_transform_init_rotate(pixman_f_transform*, double, double)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:251</i>
	 */
	void pixman_f_transform_init_rotate(pixman_f_transform t, double cos, double sin);
	/**
	 * Original signature : <code>pixman_bool_t pixman_f_transform_rotate(pixman_f_transform*, pixman_f_transform*, double, double)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:254</i>
	 */
	int pixman_f_transform_rotate(pixman_f_transform forward, pixman_f_transform reverse, double c, double s);
	/**
	 * Original signature : <code>void pixman_f_transform_init_translate(pixman_f_transform*, double, double)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:258</i>
	 */
	void pixman_f_transform_init_translate(pixman_f_transform t, double tx, double ty);
	/**
	 * Original signature : <code>pixman_bool_t pixman_f_transform_translate(pixman_f_transform*, pixman_f_transform*, double, double)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:261</i>
	 */
	int pixman_f_transform_translate(pixman_f_transform forward, pixman_f_transform reverse, double tx, double ty);
	/**
	 * Original signature : <code>pixman_bool_t pixman_f_transform_bounds(pixman_f_transform*, pixman_box16*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:265</i>
	 */
	int pixman_f_transform_bounds(pixman_f_transform t, pixman_box16 b);
	/**
	 * Original signature : <code>void pixman_f_transform_init_identity(pixman_f_transform*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:267</i>
	 */
	void pixman_f_transform_init_identity(pixman_f_transform t);
	/**
	 * This function exists only to make it possible to preserve<br>
	 * the X ABI - it should go away at first opportunity.<br>
	 * Original signature : <code>void pixman_region_set_static_pointers(pixman_box16_t*, pixman_region16_data_t*, pixman_region16_data_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:415</i>
	 */
	void pixman_region_set_static_pointers(pixman_box16 empty_box, pixman_region16_data empty_data, pixman_region16_data broken_data);
	/**
	 * creation/destruction<br>
	 * Original signature : <code>void pixman_region_init(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:420</i>
	 */
	void pixman_region_init(pixman_region16 region);
	/**
	 * Original signature : <code>void pixman_region_init_rect(pixman_region16_t*, int, int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:421</i>
	 */
	void pixman_region_init_rect(pixman_region16 region, int x, int y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_init_rects(pixman_region16_t*, const pixman_box16_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:426</i>
	 */
	int pixman_region_init_rects(pixman_region16 region, pixman_box16 boxes, int count);
	/**
	 * Original signature : <code>void pixman_region_init_with_extents(pixman_region16_t*, pixman_box16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:429</i>
	 */
	void pixman_region_init_with_extents(pixman_region16 region, pixman_box16 extents);
	/**
	 * Original signature : <code>void pixman_region_init_from_image(pixman_region16_t*, pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:431</i><br>
	 * @deprecated use the safer method {@link #pixman_region_init_from_image(org.freedesktop.pixman1.pixman_region16, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void pixman_region_init_from_image(pixman_region16 region, Pointer image);
	/**
	 * Original signature : <code>void pixman_region_init_from_image(pixman_region16_t*, pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:431</i>
	 */
	void pixman_region_init_from_image(pixman_region16 region, PointerByReference image);
	/**
	 * Original signature : <code>void pixman_region_fini(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:433</i>
	 */
	void pixman_region_fini(pixman_region16 region);
	/**
	 * manipulation<br>
	 * Original signature : <code>void pixman_region_translate(pixman_region16_t*, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:437</i>
	 */
	void pixman_region_translate(pixman_region16 region, int x, int y);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_copy(pixman_region16_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:440</i>
	 */
	int pixman_region_copy(pixman_region16 dest, pixman_region16 source);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_intersect(pixman_region16_t*, pixman_region16_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:442</i>
	 */
	int pixman_region_intersect(pixman_region16 new_reg, pixman_region16 reg1, pixman_region16 reg2);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_union(pixman_region16_t*, pixman_region16_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:445</i>
	 */
	int pixman_region_union(pixman_region16 new_reg, pixman_region16 reg1, pixman_region16 reg2);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_union_rect(pixman_region16_t*, pixman_region16_t*, int, int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:448</i>
	 */
	int pixman_region_union_rect(pixman_region16 dest, pixman_region16 source, int x, int y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_intersect_rect(pixman_region16_t*, pixman_region16_t*, int, int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:454</i>
	 */
	int pixman_region_intersect_rect(pixman_region16 dest, pixman_region16 source, int x, int y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_subtract(pixman_region16_t*, pixman_region16_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:460</i>
	 */
	int pixman_region_subtract(pixman_region16 reg_d, pixman_region16 reg_m, pixman_region16 reg_s);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_inverse(pixman_region16_t*, pixman_region16_t*, pixman_box16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:463</i>
	 */
	int pixman_region_inverse(pixman_region16 new_reg, pixman_region16 reg1, pixman_box16 inv_rect);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_contains_point(pixman_region16_t*, int, int, pixman_box16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:466</i>
	 */
	int pixman_region_contains_point(pixman_region16 region, int x, int y, pixman_box16 box);
	/**
	 * Original signature : <code>pixman_region_overlap_t pixman_region_contains_rectangle(pixman_region16_t*, pixman_box16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:470</i>
	 */
	int pixman_region_contains_rectangle(pixman_region16 region, pixman_box16 prect);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_not_empty(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:472</i>
	 */
	int pixman_region_not_empty(pixman_region16 region);
	/**
	 * Original signature : <code>pixman_box16_t* pixman_region_extents(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:473</i>
	 */
	pixman_box16 pixman_region_extents(pixman_region16 region);
	/**
	 * Original signature : <code>int pixman_region_n_rects(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:474</i>
	 */
	int pixman_region_n_rects(pixman_region16 region);
	/**
	 * Original signature : <code>pixman_box16_t* pixman_region_rectangles(pixman_region16_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:475</i><br>
	 * @deprecated use the safer methods {@link #pixman_region_rectangles(org.freedesktop.pixman1.pixman_region16, java.nio.IntBuffer)} and {@link #pixman_region_rectangles(org.freedesktop.pixman1.pixman_region16, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	pixman_box16 pixman_region_rectangles(pixman_region16 region, IntByReference n_rects);
	/**
	 * Original signature : <code>pixman_box16_t* pixman_region_rectangles(pixman_region16_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:475</i>
	 */
	pixman_box16 pixman_region_rectangles(pixman_region16 region, IntBuffer n_rects);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_equal(pixman_region16_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:477</i>
	 */
	int pixman_region_equal(pixman_region16 region1, pixman_region16 region2);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region_selfcheck(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:479</i>
	 */
	int pixman_region_selfcheck(pixman_region16 region);
	/**
	 * Original signature : <code>void pixman_region_reset(pixman_region16_t*, pixman_box16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:480</i>
	 */
	void pixman_region_reset(pixman_region16 region, pixman_box16 box);
	/**
	 * Original signature : <code>void pixman_region_clear(pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:482</i>
	 */
	void pixman_region_clear(pixman_region16 region);
	/**
	 * creation/destruction<br>
	 * Original signature : <code>void pixman_region32_init(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:515</i>
	 */
	void pixman_region32_init(pixman_region32 region);
	/**
	 * Original signature : <code>void pixman_region32_init_rect(pixman_region32_t*, int, int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:516</i>
	 */
	void pixman_region32_init_rect(pixman_region32 region, int x, int y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_init_rects(pixman_region32_t*, const pixman_box32_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:521</i>
	 */
	int pixman_region32_init_rects(pixman_region32 region, pixman_box32 boxes, int count);
	/**
	 * Original signature : <code>void pixman_region32_init_with_extents(pixman_region32_t*, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:524</i>
	 */
	void pixman_region32_init_with_extents(pixman_region32 region, pixman_box32 extents);
	/**
	 * Original signature : <code>void pixman_region32_init_from_image(pixman_region32_t*, pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:526</i><br>
	 * @deprecated use the safer method {@link #pixman_region32_init_from_image(org.freedesktop.pixman1.pixman_region32, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void pixman_region32_init_from_image(pixman_region32 region, Pointer image);
	/**
	 * Original signature : <code>void pixman_region32_init_from_image(pixman_region32_t*, pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:526</i>
	 */
	void pixman_region32_init_from_image(pixman_region32 region, PointerByReference image);
	/**
	 * Original signature : <code>void pixman_region32_fini(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:528</i>
	 */
	void pixman_region32_fini(pixman_region32 region);
	/**
	 * manipulation<br>
	 * Original signature : <code>void pixman_region32_translate(pixman_region32_t*, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:532</i>
	 */
	void pixman_region32_translate(pixman_region32 region, int x, int y);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_copy(pixman_region32_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:535</i>
	 */
	int pixman_region32_copy(pixman_region32 dest, pixman_region32 source);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_intersect(pixman_region32_t*, pixman_region32_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:537</i>
	 */
	int pixman_region32_intersect(pixman_region32 new_reg, pixman_region32 reg1, pixman_region32 reg2);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_union(pixman_region32_t*, pixman_region32_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:540</i>
	 */
	int pixman_region32_union(pixman_region32 new_reg, pixman_region32 reg1, pixman_region32 reg2);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_intersect_rect(pixman_region32_t*, pixman_region32_t*, int, int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:543</i>
	 */
	int pixman_region32_intersect_rect(pixman_region32 dest, pixman_region32 source, int x, int y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_union_rect(pixman_region32_t*, pixman_region32_t*, int, int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:549</i>
	 */
	int pixman_region32_union_rect(pixman_region32 dest, pixman_region32 source, int x, int y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_subtract(pixman_region32_t*, pixman_region32_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:555</i>
	 */
	int pixman_region32_subtract(pixman_region32 reg_d, pixman_region32 reg_m, pixman_region32 reg_s);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_inverse(pixman_region32_t*, pixman_region32_t*, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:558</i>
	 */
	int pixman_region32_inverse(pixman_region32 new_reg, pixman_region32 reg1, pixman_box32 inv_rect);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_contains_point(pixman_region32_t*, int, int, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:561</i>
	 */
	int pixman_region32_contains_point(pixman_region32 region, int x, int y, pixman_box32 box);
	/**
	 * Original signature : <code>pixman_region_overlap_t pixman_region32_contains_rectangle(pixman_region32_t*, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:565</i>
	 */
	int pixman_region32_contains_rectangle(pixman_region32 region, pixman_box32 prect);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_not_empty(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:567</i>
	 */
	int pixman_region32_not_empty(pixman_region32 region);
	/**
	 * Original signature : <code>pixman_box32_t* pixman_region32_extents(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:568</i>
	 */
	pixman_box32 pixman_region32_extents(pixman_region32 region);
	/**
	 * Original signature : <code>int pixman_region32_n_rects(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:569</i>
	 */
	int pixman_region32_n_rects(pixman_region32 region);
	/**
	 * Original signature : <code>pixman_box32_t* pixman_region32_rectangles(pixman_region32_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:570</i><br>
	 * @deprecated use the safer methods {@link #pixman_region32_rectangles(org.freedesktop.pixman1.pixman_region32, java.nio.IntBuffer)} and {@link #pixman_region32_rectangles(org.freedesktop.pixman1.pixman_region32, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	pixman_box32 pixman_region32_rectangles(pixman_region32 region, IntByReference n_rects);
	/**
	 * Original signature : <code>pixman_box32_t* pixman_region32_rectangles(pixman_region32_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:570</i>
	 */
	pixman_box32 pixman_region32_rectangles(pixman_region32 region, IntBuffer n_rects);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_equal(pixman_region32_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:572</i>
	 */
	int pixman_region32_equal(pixman_region32 region1, pixman_region32 region2);
	/**
	 * Original signature : <code>pixman_bool_t pixman_region32_selfcheck(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:574</i>
	 */
	int pixman_region32_selfcheck(pixman_region32 region);
	/**
	 * Original signature : <code>void pixman_region32_reset(pixman_region32_t*, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:575</i>
	 */
	void pixman_region32_reset(pixman_region32 region, pixman_box32 box);
	/**
	 * Original signature : <code>void pixman_region32_clear(pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:577</i>
	 */
	void pixman_region32_clear(pixman_region32 region);
	/**
	 * Copy / Fill / Misc<br>
	 * Original signature : <code>pixman_bool_t pixman_blt(uint32_t*, uint32_t*, int, int, int, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:581</i><br>
	 * @deprecated use the safer methods {@link #pixman_blt(java.nio.IntBuffer, java.nio.IntBuffer, int, int, int, int, int, int, int, int, int, int)} and {@link #pixman_blt(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, int, int, int, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	int pixman_blt(IntByReference src_bits, IntByReference dst_bits, int src_stride, int dst_stride, int src_bpp, int dst_bpp, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
	/**
	 * Copy / Fill / Misc<br>
	 * Original signature : <code>pixman_bool_t pixman_blt(uint32_t*, uint32_t*, int, int, int, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:581</i>
	 */
	int pixman_blt(IntBuffer src_bits, IntBuffer dst_bits, int src_stride, int dst_stride, int src_bpp, int dst_bpp, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
	/**
	 * Original signature : <code>pixman_bool_t pixman_fill(uint32_t*, int, int, int, int, int, int, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:593</i><br>
	 * @deprecated use the safer methods {@link #pixman_fill(java.nio.IntBuffer, int, int, int, int, int, int, int)} and {@link #pixman_fill(com.sun.jna.ptr.IntByReference, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	int pixman_fill(IntByReference bits, int stride, int bpp, int x, int y, int width, int height, int _xor);
	/**
	 * Original signature : <code>pixman_bool_t pixman_fill(uint32_t*, int, int, int, int, int, int, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:593</i>
	 */
	int pixman_fill(IntBuffer bits, int stride, int bpp, int x, int y, int width, int height, int _xor);
	/**
	 * Original signature : <code>int pixman_version()</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:602</i>
	 */
	int pixman_version();
	/**
	 * Original signature : <code>char* pixman_version_string()</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:603</i>
	 */
	String pixman_version_string();
	/**
	 * Querying supported format values.<br>
	 * Original signature : <code>pixman_bool_t pixman_format_supported_destination(pixman_format_code_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:749</i>
	 */
	int pixman_format_supported_destination(int format);
	/**
	 * Original signature : <code>pixman_bool_t pixman_format_supported_source(pixman_format_code_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:750</i>
	 */
	int pixman_format_supported_source(int format);
	/**
	 * Constructors<br>
	 * Original signature : <code>pixman_image_t* pixman_image_create_solid_fill(const pixman_color_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:753</i>
	 */
	PointerByReference pixman_image_create_solid_fill(pixman_color color);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_linear_gradient(const pixman_point_fixed_t*, const pixman_point_fixed_t*, const pixman_gradient_stop_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:754</i>
	 */
	PointerByReference pixman_image_create_linear_gradient(pixman_point_fixed p1, pixman_point_fixed p2, pixman_gradient_stop stops, int n_stops);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_radial_gradient(const pixman_point_fixed_t*, const pixman_point_fixed_t*, pixman_fixed_t, pixman_fixed_t, const pixman_gradient_stop_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:758</i>
	 */
	PointerByReference pixman_image_create_radial_gradient(pixman_point_fixed inner, pixman_point_fixed outer, int inner_radius, int outer_radius, pixman_gradient_stop stops, int n_stops);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_conical_gradient(const pixman_point_fixed_t*, pixman_fixed_t, const pixman_gradient_stop_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:764</i>
	 */
	PointerByReference pixman_image_create_conical_gradient(pixman_point_fixed center, int angle, pixman_gradient_stop stops, int n_stops);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_bits(pixman_format_code_t, int, int, uint32_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:768</i><br>
	 * @deprecated use the safer methods {@link #pixman_image_create_bits(int, int, int, java.nio.IntBuffer, int)} and {@link #pixman_image_create_bits(int, int, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	PointerByReference pixman_image_create_bits(int format, int width, int height, IntByReference bits, int rowstride_bytes);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_bits(pixman_format_code_t, int, int, uint32_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:768</i>
	 */
	PointerByReference pixman_image_create_bits(int format, int width, int height, IntBuffer bits, int rowstride_bytes);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_bits_no_clear(pixman_format_code_t, int, int, uint32_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:773</i><br>
	 * @deprecated use the safer methods {@link #pixman_image_create_bits_no_clear(int, int, int, java.nio.IntBuffer, int)} and {@link #pixman_image_create_bits_no_clear(int, int, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	PointerByReference pixman_image_create_bits_no_clear(int format, int width, int height, IntByReference bits, int rowstride_bytes);
	/**
	 * Original signature : <code>pixman_image_t* pixman_image_create_bits_no_clear(pixman_format_code_t, int, int, uint32_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:773</i>
	 */
	PointerByReference pixman_image_create_bits_no_clear(int format, int width, int height, IntBuffer bits, int rowstride_bytes);
	/**
	 * Destructor<br>
	 * Original signature : <code>pixman_image_t* pixman_image_ref(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:780</i><br>
	 * @deprecated use the safer method {@link #pixman_image_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference pixman_image_ref(Pointer image);
	/**
	 * Destructor<br>
	 * Original signature : <code>pixman_image_t* pixman_image_ref(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:780</i>
	 */
	PointerByReference pixman_image_ref(PointerByReference image);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_unref(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:781</i><br>
	 * @deprecated use the safer method {@link #pixman_image_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_unref(Pointer image);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_unref(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:781</i>
	 */
	int pixman_image_unref(PointerByReference image);
	/**
	 * Original signature : <code>void pixman_image_set_destroy_function(pixman_image_t*, pixman_image_destroy_func_t, void*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:783</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_destroy_function(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.Pixman1Library.pixman_image_destroy_func_t, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void pixman_image_set_destroy_function(Pointer image, Pixman1Library.pixman_image_destroy_func_t function, Pointer data);
	/**
	 * Original signature : <code>void pixman_image_set_destroy_function(pixman_image_t*, pixman_image_destroy_func_t, void*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:783</i>
	 */
	void pixman_image_set_destroy_function(PointerByReference image, Pixman1Library.pixman_image_destroy_func_t function, Pointer data);
	/**
	 * Original signature : <code>void* pixman_image_get_destroy_data(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:786</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_destroy_data(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer pixman_image_get_destroy_data(Pointer image);
	/**
	 * Original signature : <code>void* pixman_image_get_destroy_data(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:786</i>
	 */
	Pointer pixman_image_get_destroy_data(PointerByReference image);
	/**
	 * Set properties<br>
	 * Original signature : <code>pixman_bool_t pixman_image_set_clip_region(pixman_image_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:789</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_clip_region(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_region16)} instead
	 */
	@Deprecated 
	int pixman_image_set_clip_region(Pointer image, pixman_region16 region);
	/**
	 * Set properties<br>
	 * Original signature : <code>pixman_bool_t pixman_image_set_clip_region(pixman_image_t*, pixman_region16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:789</i>
	 */
	int pixman_image_set_clip_region(PointerByReference image, pixman_region16 region);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_clip_region32(pixman_image_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:791</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_clip_region32(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_region32)} instead
	 */
	@Deprecated 
	int pixman_image_set_clip_region32(Pointer image, pixman_region32 region);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_clip_region32(pixman_image_t*, pixman_region32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:791</i>
	 */
	int pixman_image_set_clip_region32(PointerByReference image, pixman_region32 region);
	/**
	 * Original signature : <code>void pixman_image_set_has_client_clip(pixman_image_t*, pixman_bool_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:793</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_has_client_clip(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void pixman_image_set_has_client_clip(Pointer image, int clien_clip);
	/**
	 * Original signature : <code>void pixman_image_set_has_client_clip(pixman_image_t*, pixman_bool_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:793</i>
	 */
	void pixman_image_set_has_client_clip(PointerByReference image, int clien_clip);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_transform(pixman_image_t*, const pixman_transform_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:795</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_transform(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_transform)} instead
	 */
	@Deprecated 
	int pixman_image_set_transform(Pointer image, pixman_transform transform);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_transform(pixman_image_t*, const pixman_transform_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:795</i>
	 */
	int pixman_image_set_transform(PointerByReference image, pixman_transform transform);
	/**
	 * Original signature : <code>void pixman_image_set_repeat(pixman_image_t*, pixman_repeat_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:797</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_repeat(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void pixman_image_set_repeat(Pointer image, int repeat);
	/**
	 * Original signature : <code>void pixman_image_set_repeat(pixman_image_t*, pixman_repeat_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:797</i>
	 */
	void pixman_image_set_repeat(PointerByReference image, int repeat);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_filter(pixman_image_t*, pixman_filter_t, const pixman_fixed_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:799</i><br>
	 * @deprecated use the safer methods {@link #pixman_image_set_filter(com.sun.jna.ptr.PointerByReference, int, java.nio.IntBuffer, int)} and {@link #pixman_image_set_filter(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int pixman_image_set_filter(Pointer image, int filter, IntByReference filter_params, int n_filter_params);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_filter(pixman_image_t*, pixman_filter_t, const pixman_fixed_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:799</i>
	 */
	int pixman_image_set_filter(PointerByReference image, int filter, IntBuffer filter_params, int n_filter_params);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_set_filter(pixman_image_t*, pixman_filter_t, const pixman_fixed_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:799</i>
	 */
	int pixman_image_set_filter(PointerByReference image, int filter, IntByReference filter_params, int n_filter_params);
	/**
	 * Original signature : <code>void pixman_image_set_source_clipping(pixman_image_t*, pixman_bool_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:803</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_source_clipping(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void pixman_image_set_source_clipping(Pointer image, int source_clipping);
	/**
	 * Original signature : <code>void pixman_image_set_source_clipping(pixman_image_t*, pixman_bool_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:803</i>
	 */
	void pixman_image_set_source_clipping(PointerByReference image, int source_clipping);
	/**
	 * Original signature : <code>void pixman_image_set_alpha_map(pixman_image_t*, pixman_image_t*, int16_t, int16_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:805</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_alpha_map(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, short, short)} instead
	 */
	@Deprecated 
	void pixman_image_set_alpha_map(Pointer image, Pointer alpha_map, short x, short y);
	/**
	 * Original signature : <code>void pixman_image_set_alpha_map(pixman_image_t*, pixman_image_t*, int16_t, int16_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:805</i>
	 */
	void pixman_image_set_alpha_map(PointerByReference image, PointerByReference alpha_map, short x, short y);
	/**
	 * Original signature : <code>void pixman_image_set_component_alpha(pixman_image_t*, pixman_bool_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:809</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_component_alpha(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void pixman_image_set_component_alpha(Pointer image, int component_alpha);
	/**
	 * Original signature : <code>void pixman_image_set_component_alpha(pixman_image_t*, pixman_bool_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:809</i>
	 */
	void pixman_image_set_component_alpha(PointerByReference image, int component_alpha);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_get_component_alpha(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:811</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_component_alpha(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_get_component_alpha(Pointer image);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_get_component_alpha(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:811</i>
	 */
	int pixman_image_get_component_alpha(PointerByReference image);
	/**
	 * Original signature : <code>void pixman_image_set_accessors(pixman_image_t*, pixman_read_memory_func_t, pixman_write_memory_func_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:812</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_accessors(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.Pixman1Library.pixman_read_memory_func_t, org.freedesktop.pixman1.Pixman1Library.pixman_write_memory_func_t)} instead
	 */
	@Deprecated 
	void pixman_image_set_accessors(Pointer image, Pixman1Library.pixman_read_memory_func_t read_func, Pixman1Library.pixman_write_memory_func_t write_func);
	/**
	 * Original signature : <code>void pixman_image_set_accessors(pixman_image_t*, pixman_read_memory_func_t, pixman_write_memory_func_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:812</i>
	 */
	void pixman_image_set_accessors(PointerByReference image, Pixman1Library.pixman_read_memory_func_t read_func, Pixman1Library.pixman_write_memory_func_t write_func);
	/**
	 * Original signature : <code>void pixman_image_set_indexed(pixman_image_t*, const pixman_indexed_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:815</i><br>
	 * @deprecated use the safer method {@link #pixman_image_set_indexed(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_indexed)} instead
	 */
	@Deprecated 
	void pixman_image_set_indexed(Pointer image, pixman_indexed indexed);
	/**
	 * Original signature : <code>void pixman_image_set_indexed(pixman_image_t*, const pixman_indexed_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:815</i>
	 */
	void pixman_image_set_indexed(PointerByReference image, pixman_indexed indexed);
	/**
	 * Original signature : <code>uint32_t* pixman_image_get_data(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:817</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_data(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	IntByReference pixman_image_get_data(Pointer image);
	/**
	 * Original signature : <code>uint32_t* pixman_image_get_data(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:817</i>
	 */
	IntByReference pixman_image_get_data(PointerByReference image);
	/**
	 * Original signature : <code>int pixman_image_get_width(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:818</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_width(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_get_width(Pointer image);
	/**
	 * Original signature : <code>int pixman_image_get_width(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:818</i>
	 */
	int pixman_image_get_width(PointerByReference image);
	/**
	 * Original signature : <code>int pixman_image_get_height(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:819</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_height(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_get_height(Pointer image);
	/**
	 * Original signature : <code>int pixman_image_get_height(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:819</i>
	 */
	int pixman_image_get_height(PointerByReference image);
	/**
	 * in bytes<br>
	 * Original signature : <code>int pixman_image_get_stride(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:820</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_stride(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_get_stride(Pointer image);
	/**
	 * in bytes<br>
	 * Original signature : <code>int pixman_image_get_stride(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:820</i>
	 */
	int pixman_image_get_stride(PointerByReference image);
	/**
	 * Original signature : <code>int pixman_image_get_depth(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:821</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_depth(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_get_depth(Pointer image);
	/**
	 * Original signature : <code>int pixman_image_get_depth(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:821</i>
	 */
	int pixman_image_get_depth(PointerByReference image);
	/**
	 * Original signature : <code>pixman_format_code_t pixman_image_get_format(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:822</i><br>
	 * @deprecated use the safer method {@link #pixman_image_get_format(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pixman_image_get_format(Pointer image);
	/**
	 * Original signature : <code>pixman_format_code_t pixman_image_get_format(pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:822</i>
	 */
	int pixman_image_get_format(PointerByReference image);
	/**
	 * Create the parameter list for a SEPARABLE_CONVOLUTION filter<br>
	 * with the given kernels and scale parameters.<br>
	 * Original signature : <code>pixman_fixed_t* pixman_filter_create_separable_convolution(int*, pixman_fixed_t, pixman_fixed_t, pixman_kernel_t, pixman_kernel_t, pixman_kernel_t, pixman_kernel_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:839</i><br>
	 * @deprecated use the safer methods {@link #pixman_filter_create_separable_convolution(java.nio.IntBuffer, int, int, int, int, int, int, int, int)} and {@link #pixman_filter_create_separable_convolution(com.sun.jna.ptr.IntByReference, int, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	IntByReference pixman_filter_create_separable_convolution(IntByReference n_values, int scale_x, int scale_y, int reconstruct_x, int reconstruct_y, int sample_x, int sample_y, int subsample_bits_x, int subsample_bits_y);
	/**
	 * Create the parameter list for a SEPARABLE_CONVOLUTION filter<br>
	 * with the given kernels and scale parameters.<br>
	 * Original signature : <code>pixman_fixed_t* pixman_filter_create_separable_convolution(int*, pixman_fixed_t, pixman_fixed_t, pixman_kernel_t, pixman_kernel_t, pixman_kernel_t, pixman_kernel_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:839</i>
	 */
	IntByReference pixman_filter_create_separable_convolution(IntBuffer n_values, int scale_x, int scale_y, int reconstruct_x, int reconstruct_y, int sample_x, int sample_y, int subsample_bits_x, int subsample_bits_y);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_fill_rectangles(pixman_op_t, pixman_image_t*, const pixman_color_t*, int, const pixman_rectangle16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:850</i><br>
	 * @deprecated use the safer method {@link #pixman_image_fill_rectangles(int, com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_color, int, org.freedesktop.pixman1.pixman_rectangle16)} instead
	 */
	@Deprecated 
	int pixman_image_fill_rectangles(int op, Pointer image, pixman_color color, int n_rects, pixman_rectangle16 rects);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_fill_rectangles(pixman_op_t, pixman_image_t*, const pixman_color_t*, int, const pixman_rectangle16_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:850</i>
	 */
	int pixman_image_fill_rectangles(int op, PointerByReference image, pixman_color color, int n_rects, pixman_rectangle16 rects);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_fill_boxes(pixman_op_t, pixman_image_t*, const pixman_color_t*, int, const pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:855</i><br>
	 * @deprecated use the safer method {@link #pixman_image_fill_boxes(int, com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_color, int, org.freedesktop.pixman1.pixman_box32)} instead
	 */
	@Deprecated 
	int pixman_image_fill_boxes(int op, Pointer dest, pixman_color color, int n_boxes, pixman_box32 boxes);
	/**
	 * Original signature : <code>pixman_bool_t pixman_image_fill_boxes(pixman_op_t, pixman_image_t*, const pixman_color_t*, int, const pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:855</i>
	 */
	int pixman_image_fill_boxes(int op, PointerByReference dest, pixman_color color, int n_boxes, pixman_box32 boxes);
	/**
	 * Composite<br>
	 * Original signature : <code>pixman_bool_t pixman_compute_composite_region(pixman_region16_t*, pixman_image_t*, pixman_image_t*, pixman_image_t*, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:862</i><br>
	 * @deprecated use the safer method {@link #pixman_compute_composite_region(org.freedesktop.pixman1.pixman_region16, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, short, short, short, short, short, short, short, short)} instead
	 */
	@Deprecated 
	int pixman_compute_composite_region(pixman_region16 region, Pointer src_image, Pointer mask_image, Pointer dest_image, short src_x, short src_y, short mask_x, short mask_y, short dest_x, short dest_y, short width, short height);
	/**
	 * Composite<br>
	 * Original signature : <code>pixman_bool_t pixman_compute_composite_region(pixman_region16_t*, pixman_image_t*, pixman_image_t*, pixman_image_t*, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:862</i>
	 */
	int pixman_compute_composite_region(pixman_region16 region, PointerByReference src_image, PointerByReference mask_image, PointerByReference dest_image, short src_x, short src_y, short mask_x, short mask_y, short dest_x, short dest_y, short width, short height);
	/**
	 * Original signature : <code>void pixman_image_composite(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_image_t*, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:874</i><br>
	 * @deprecated use the safer method {@link #pixman_image_composite(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, short, short, short, short, short, short, short, short)} instead
	 */
	@Deprecated 
	void pixman_image_composite(int op, Pointer src, Pointer mask, Pointer dest, short src_x, short src_y, short mask_x, short mask_y, short dest_x, short dest_y, short width, short height);
	/**
	 * Original signature : <code>void pixman_image_composite(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_image_t*, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:874</i>
	 */
	void pixman_image_composite(int op, PointerByReference src, PointerByReference mask, PointerByReference dest, short src_x, short src_y, short mask_x, short mask_y, short dest_x, short dest_y, short width, short height);
	/**
	 * Original signature : <code>void pixman_image_composite32(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_image_t*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:886</i><br>
	 * @deprecated use the safer method {@link #pixman_image_composite32(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	void pixman_image_composite32(int op, Pointer src, Pointer mask, Pointer dest, int src_x, int src_y, int mask_x, int mask_y, int dest_x, int dest_y, int width, int height);
	/**
	 * Original signature : <code>void pixman_image_composite32(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_image_t*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:886</i>
	 */
	void pixman_image_composite32(int op, PointerByReference src, PointerByReference mask, PointerByReference dest, int src_x, int src_y, int mask_x, int mask_y, int dest_x, int dest_y, int width, int height);
	/**
	 * Executive Summary: This function is a no-op that only exists<br>
	 * for historical reasons.<br>
	 * There used to be a bug in the X server where it would rely on<br>
	 * out-of-bounds accesses when it was asked to composite with a<br>
	 * window as the source. It would create a pixman image pointing<br>
	 * to some bogus position in memory, but then set a clip region<br>
	 * to the position where the actual bits were.<br>
	 * Due to a bug in old versions of pixman, where it would not clip<br>
	 * against the image bounds when a clip region was set, this would<br>
	 * actually work. So when the pixman bug was fixed, a workaround was<br>
	 * added to allow certain out-of-bound accesses. This function disabled<br>
	 * those workarounds.<br>
	 * Since 0.21.2, pixman doesn't do these workarounds anymore, so now this<br>
	 * function is a no-op.<br>
	 * Original signature : <code>void pixman_disable_out_of_bounds_workaround()</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:917</i>
	 */
	void pixman_disable_out_of_bounds_workaround();
	/**
	 * Original signature : <code>pixman_glyph_cache_t* pixman_glyph_cache_create()</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:929</i>
	 */
	PointerByReference pixman_glyph_cache_create();
	/**
	 * Original signature : <code>void pixman_glyph_cache_destroy(pixman_glyph_cache_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:930</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_cache_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void pixman_glyph_cache_destroy(Pointer cache);
	/**
	 * Original signature : <code>void pixman_glyph_cache_destroy(pixman_glyph_cache_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:930</i>
	 */
	void pixman_glyph_cache_destroy(PointerByReference cache);
	/**
	 * Original signature : <code>void pixman_glyph_cache_freeze(pixman_glyph_cache_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:931</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_cache_freeze(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void pixman_glyph_cache_freeze(Pointer cache);
	/**
	 * Original signature : <code>void pixman_glyph_cache_freeze(pixman_glyph_cache_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:931</i>
	 */
	void pixman_glyph_cache_freeze(PointerByReference cache);
	/**
	 * Original signature : <code>void pixman_glyph_cache_thaw(pixman_glyph_cache_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:932</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_cache_thaw(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void pixman_glyph_cache_thaw(Pointer cache);
	/**
	 * Original signature : <code>void pixman_glyph_cache_thaw(pixman_glyph_cache_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:932</i>
	 */
	void pixman_glyph_cache_thaw(PointerByReference cache);
	/**
	 * Original signature : <code>void* pixman_glyph_cache_lookup(pixman_glyph_cache_t*, void*, void*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:933</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_cache_lookup(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer pixman_glyph_cache_lookup(Pointer cache, Pointer font_key, Pointer glyph_key);
	/**
	 * Original signature : <code>void* pixman_glyph_cache_lookup(pixman_glyph_cache_t*, void*, void*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:933</i>
	 */
	Pointer pixman_glyph_cache_lookup(PointerByReference cache, Pointer font_key, Pointer glyph_key);
	/**
	 * Original signature : <code>void* pixman_glyph_cache_insert(pixman_glyph_cache_t*, void*, void*, int, int, pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:936</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_cache_insert(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer pixman_glyph_cache_insert(Pointer cache, Pointer font_key, Pointer glyph_key, int origin_x, int origin_y, Pointer glyph_image);
	/**
	 * Original signature : <code>void* pixman_glyph_cache_insert(pixman_glyph_cache_t*, void*, void*, int, int, pixman_image_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:936</i>
	 */
	Pointer pixman_glyph_cache_insert(PointerByReference cache, Pointer font_key, Pointer glyph_key, int origin_x, int origin_y, PointerByReference glyph_image);
	/**
	 * Original signature : <code>void pixman_glyph_cache_remove(pixman_glyph_cache_t*, void*, void*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:942</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_cache_remove(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void pixman_glyph_cache_remove(Pointer cache, Pointer font_key, Pointer glyph_key);
	/**
	 * Original signature : <code>void pixman_glyph_cache_remove(pixman_glyph_cache_t*, void*, void*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:942</i>
	 */
	void pixman_glyph_cache_remove(PointerByReference cache, Pointer font_key, Pointer glyph_key);
	/**
	 * Original signature : <code>void pixman_glyph_get_extents(pixman_glyph_cache_t*, int, pixman_glyph_t*, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:945</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_get_extents(com.sun.jna.ptr.PointerByReference, int, org.freedesktop.pixman1.pixman_glyph_t, org.freedesktop.pixman1.pixman_box32)} instead
	 */
	@Deprecated 
	void pixman_glyph_get_extents(Pointer cache, int n_glyphs, pixman_glyph_t glyphs, pixman_box32 extents);
	/**
	 * Original signature : <code>void pixman_glyph_get_extents(pixman_glyph_cache_t*, int, pixman_glyph_t*, pixman_box32_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:945</i>
	 */
	void pixman_glyph_get_extents(PointerByReference cache, int n_glyphs, pixman_glyph_t glyphs, pixman_box32 extents);
	/**
	 * Original signature : <code>pixman_format_code_t pixman_glyph_get_mask_format(pixman_glyph_cache_t*, int, const pixman_glyph_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:949</i><br>
	 * @deprecated use the safer method {@link #pixman_glyph_get_mask_format(com.sun.jna.ptr.PointerByReference, int, org.freedesktop.pixman1.pixman_glyph_t)} instead
	 */
	@Deprecated 
	int pixman_glyph_get_mask_format(Pointer cache, int n_glyphs, pixman_glyph_t glyphs);
	/**
	 * Original signature : <code>pixman_format_code_t pixman_glyph_get_mask_format(pixman_glyph_cache_t*, int, const pixman_glyph_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:949</i>
	 */
	int pixman_glyph_get_mask_format(PointerByReference cache, int n_glyphs, pixman_glyph_t glyphs);
	/**
	 * Original signature : <code>void pixman_composite_glyphs(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_format_code_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, pixman_glyph_cache_t*, int, const pixman_glyph_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:952</i><br>
	 * @deprecated use the safer method {@link #pixman_composite_glyphs(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, int, int, int, com.sun.jna.ptr.PointerByReference, int, org.freedesktop.pixman1.pixman_glyph_t)} instead
	 */
	@Deprecated 
	void pixman_composite_glyphs(int op, Pointer src, Pointer dest, int mask_format, int src_x, int src_y, int mask_x, int mask_y, int dest_x, int dest_y, int width, int height, Pointer cache, int n_glyphs, pixman_glyph_t glyphs);
	/**
	 * Original signature : <code>void pixman_composite_glyphs(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_format_code_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, pixman_glyph_cache_t*, int, const pixman_glyph_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:952</i>
	 */
	void pixman_composite_glyphs(int op, PointerByReference src, PointerByReference dest, int mask_format, int src_x, int src_y, int mask_x, int mask_y, int dest_x, int dest_y, int width, int height, PointerByReference cache, int n_glyphs, pixman_glyph_t glyphs);
	/**
	 * Original signature : <code>void pixman_composite_glyphs_no_mask(pixman_op_t, pixman_image_t*, pixman_image_t*, int32_t, int32_t, int32_t, int32_t, pixman_glyph_cache_t*, int, const pixman_glyph_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:967</i><br>
	 * @deprecated use the safer method {@link #pixman_composite_glyphs_no_mask(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, com.sun.jna.ptr.PointerByReference, int, org.freedesktop.pixman1.pixman_glyph_t)} instead
	 */
	@Deprecated 
	void pixman_composite_glyphs_no_mask(int op, Pointer src, Pointer dest, int src_x, int src_y, int dest_x, int dest_y, Pointer cache, int n_glyphs, pixman_glyph_t glyphs);
	/**
	 * Original signature : <code>void pixman_composite_glyphs_no_mask(pixman_op_t, pixman_image_t*, pixman_image_t*, int32_t, int32_t, int32_t, int32_t, pixman_glyph_cache_t*, int, const pixman_glyph_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:967</i>
	 */
	void pixman_composite_glyphs_no_mask(int op, PointerByReference src, PointerByReference dest, int src_x, int src_y, int dest_x, int dest_y, PointerByReference cache, int n_glyphs, pixman_glyph_t glyphs);
	/**
	 * Original signature : <code>pixman_fixed_t pixman_sample_ceil_y(pixman_fixed_t, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1034</i>
	 */
	int pixman_sample_ceil_y(int y, int bpp);
	/**
	 * Original signature : <code>pixman_fixed_t pixman_sample_floor_y(pixman_fixed_t, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1036</i>
	 */
	int pixman_sample_floor_y(int y, int bpp);
	/**
	 * Original signature : <code>void pixman_edge_step(pixman_edge_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1038</i>
	 */
	void pixman_edge_step(pixman_edge e, int n);
	/**
	 * Original signature : <code>void pixman_edge_init(pixman_edge_t*, int, pixman_fixed_t, pixman_fixed_t, pixman_fixed_t, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1040</i>
	 */
	void pixman_edge_init(pixman_edge e, int bpp, int y_start, int x_top, int y_top, int x_bot, int y_bot);
	/**
	 * Original signature : <code>void pixman_line_fixed_edge_init(pixman_edge_t*, int, pixman_fixed_t, const pixman_line_fixed_t*, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1047</i>
	 */
	void pixman_line_fixed_edge_init(pixman_edge e, int bpp, int y, pixman_line_fixed line, int x_off, int y_off);
	/**
	 * Original signature : <code>void pixman_rasterize_edges(pixman_image_t*, pixman_edge_t*, pixman_edge_t*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1053</i><br>
	 * @deprecated use the safer method {@link #pixman_rasterize_edges(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_edge, org.freedesktop.pixman1.pixman_edge, int, int)} instead
	 */
	@Deprecated 
	void pixman_rasterize_edges(Pointer image, pixman_edge l, pixman_edge r, int t, int b);
	/**
	 * Original signature : <code>void pixman_rasterize_edges(pixman_image_t*, pixman_edge_t*, pixman_edge_t*, pixman_fixed_t, pixman_fixed_t)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1053</i>
	 */
	void pixman_rasterize_edges(PointerByReference image, pixman_edge l, pixman_edge r, int t, int b);
	/**
	 * Original signature : <code>void pixman_add_traps(pixman_image_t*, int16_t, int16_t, int, const pixman_trap_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1058</i><br>
	 * @deprecated use the safer method {@link #pixman_add_traps(com.sun.jna.ptr.PointerByReference, short, short, int, org.freedesktop.pixman1.pixman_trap)} instead
	 */
	@Deprecated 
	void pixman_add_traps(Pointer image, short x_off, short y_off, int ntrap, pixman_trap traps);
	/**
	 * Original signature : <code>void pixman_add_traps(pixman_image_t*, int16_t, int16_t, int, const pixman_trap_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1058</i>
	 */
	void pixman_add_traps(PointerByReference image, short x_off, short y_off, int ntrap, pixman_trap traps);
	/**
	 * Original signature : <code>void pixman_add_trapezoids(pixman_image_t*, int16_t, int, int, const pixman_trapezoid_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1063</i><br>
	 * @deprecated use the safer method {@link #pixman_add_trapezoids(com.sun.jna.ptr.PointerByReference, short, int, int, org.freedesktop.pixman1.pixman_trapezoid)} instead
	 */
	@Deprecated 
	void pixman_add_trapezoids(Pointer image, short x_off, int y_off, int ntraps, pixman_trapezoid traps);
	/**
	 * Original signature : <code>void pixman_add_trapezoids(pixman_image_t*, int16_t, int, int, const pixman_trapezoid_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1063</i>
	 */
	void pixman_add_trapezoids(PointerByReference image, short x_off, int y_off, int ntraps, pixman_trapezoid traps);
	/**
	 * Original signature : <code>void pixman_rasterize_trapezoid(pixman_image_t*, const pixman_trapezoid_t*, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1068</i><br>
	 * @deprecated use the safer method {@link #pixman_rasterize_trapezoid(com.sun.jna.ptr.PointerByReference, org.freedesktop.pixman1.pixman_trapezoid, int, int)} instead
	 */
	@Deprecated 
	void pixman_rasterize_trapezoid(Pointer image, pixman_trapezoid trap, int x_off, int y_off);
	/**
	 * Original signature : <code>void pixman_rasterize_trapezoid(pixman_image_t*, const pixman_trapezoid_t*, int, int)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1068</i>
	 */
	void pixman_rasterize_trapezoid(PointerByReference image, pixman_trapezoid trap, int x_off, int y_off);
	/**
	 * Original signature : <code>void pixman_composite_trapezoids(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_format_code_t, int, int, int, int, int, const pixman_trapezoid_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1072</i><br>
	 * @deprecated use the safer method {@link #pixman_composite_trapezoids(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, org.freedesktop.pixman1.pixman_trapezoid)} instead
	 */
	@Deprecated 
	void pixman_composite_trapezoids(int op, Pointer src, Pointer dst, int mask_format, int x_src, int y_src, int x_dst, int y_dst, int n_traps, pixman_trapezoid traps);
	/**
	 * Original signature : <code>void pixman_composite_trapezoids(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_format_code_t, int, int, int, int, int, const pixman_trapezoid_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1072</i>
	 */
	void pixman_composite_trapezoids(int op, PointerByReference src, PointerByReference dst, int mask_format, int x_src, int y_src, int x_dst, int y_dst, int n_traps, pixman_trapezoid traps);
	/**
	 * Original signature : <code>void pixman_composite_triangles(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_format_code_t, int, int, int, int, int, const pixman_triangle_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1082</i><br>
	 * @deprecated use the safer method {@link #pixman_composite_triangles(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, int, int, int, int, int, org.freedesktop.pixman1.pixman_triangle)} instead
	 */
	@Deprecated 
	void pixman_composite_triangles(int op, Pointer src, Pointer dst, int mask_format, int x_src, int y_src, int x_dst, int y_dst, int n_tris, pixman_triangle tris);
	/**
	 * Original signature : <code>void pixman_composite_triangles(pixman_op_t, pixman_image_t*, pixman_image_t*, pixman_format_code_t, int, int, int, int, int, const pixman_triangle_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1082</i>
	 */
	void pixman_composite_triangles(int op, PointerByReference src, PointerByReference dst, int mask_format, int x_src, int y_src, int x_dst, int y_dst, int n_tris, pixman_triangle tris);
	/**
	 * Original signature : <code>void pixman_add_triangles(pixman_image_t*, int32_t, int32_t, int, const pixman_triangle_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1092</i><br>
	 * @deprecated use the safer method {@link #pixman_add_triangles(com.sun.jna.ptr.PointerByReference, int, int, int, org.freedesktop.pixman1.pixman_triangle)} instead
	 */
	@Deprecated 
	void pixman_add_triangles(Pointer image, int x_off, int y_off, int n_tris, pixman_triangle tris);
	/**
	 * Original signature : <code>void pixman_add_triangles(pixman_image_t*, int32_t, int32_t, int, const pixman_triangle_t*)</code><br>
	 * <i>native declaration : /usr/include/pixman-1/pixman.h:1092</i>
	 */
	void pixman_add_triangles(PointerByReference image, int x_off, int y_off, int n_tris, pixman_triangle tris);
	public static class pixman_image_t extends PointerType {
		public pixman_image_t(Pointer address) {
			super(address);
		}
		public pixman_image_t() {
			super();
		}
	};
	public static class pixman_glyph_cache_t extends PointerType {
		public pixman_glyph_cache_t(Pointer address) {
			super(address);
		}
		public pixman_glyph_cache_t() {
			super();
		}
	};
}
