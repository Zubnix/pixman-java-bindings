package org.freedesktop.pixman1;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/pixman-1/pixman.h:627</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class pixman_indexed extends Structure {
	/** C type : pixman_bool_t */
	public int color;
	/** C type : uint32_t[256] */
	public int[] rgba = new int[256];
	/** C type : pixman_index_type[32768] */
	public byte[] ent = new byte[32768];
	public pixman_indexed() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("color", "rgba", "ent");
	}
	/**
	 * @param color C type : pixman_bool_t<br>
	 * @param rgba C type : uint32_t[256]<br>
	 * @param ent C type : pixman_index_type[32768]
	 */
	public pixman_indexed(int color, int rgba[], byte ent[]) {
		super();
		this.color = color;
		if ((rgba.length != this.rgba.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rgba = rgba;
		if ((ent.length != this.ent.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ent = ent;
	}
	public pixman_indexed(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends pixman_indexed implements Structure.ByReference {
		
	};
	public static class ByValue extends pixman_indexed implements Structure.ByValue {
		
	};
}
