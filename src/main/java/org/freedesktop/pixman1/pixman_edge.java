package org.freedesktop.pixman1;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * An edge structure.  This represents a single polygon edge<br>
 * and can be quickly stepped across small or large gaps in the<br>
 * sample grid<br>
 * <i>native declaration : /usr/include/pixman-1/pixman.h:992</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class pixman_edge extends Structure {
	/** C type : pixman_fixed_t */
	public int x;
	/** C type : pixman_fixed_t */
	public int e;
	/** C type : pixman_fixed_t */
	public int stepx;
	/** C type : pixman_fixed_t */
	public int signdx;
	/** C type : pixman_fixed_t */
	public int dy;
	/** C type : pixman_fixed_t */
	public int dx;
	/** C type : pixman_fixed_t */
	public int stepx_small;
	/** C type : pixman_fixed_t */
	public int stepx_big;
	/** C type : pixman_fixed_t */
	public int dx_small;
	/** C type : pixman_fixed_t */
	public int dx_big;
	public pixman_edge() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("x", "e", "stepx", "signdx", "dy", "dx", "stepx_small", "stepx_big", "dx_small", "dx_big");
	}
	public pixman_edge(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends pixman_edge implements Structure.ByReference {
		
	};
	public static class ByValue extends pixman_edge implements Structure.ByValue {
		
	};
}
